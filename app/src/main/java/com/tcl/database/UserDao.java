package com.tcl.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tcl.database.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "USER".
 */
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _Name = new Property(0, String.class, "_Name", false, "__NAME");
        public final static Property _IpAddress = new Property(1, String.class, "_IpAddress", false, "__IP_ADDRESS");
        public final static Property _UID = new Property(2, String.class, "_UID", true, "__UID");
    };

    private DaoSession daoSession;

    public UserDao(DaoConfig config) {
        super(config);
    }

    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"__NAME\" TEXT," + // 0: _Name
                "\"__IP_ADDRESS\" TEXT," + // 1: _IpAddress
                "\"__UID\" TEXT PRIMARY KEY NOT NULL ," + // 2: _UID
                "\"__ON_OFFLINE\" INTEGER NOT NULL );"); // 3: _OnOffline
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();

        String _Name = entity.get_Name();
        if (_Name != null) {
            stmt.bindString(1, _Name);
        }

        String _IpAddress = entity.get_IpAddress();
        if (_IpAddress != null) {
            stmt.bindString(2, _IpAddress);
        }
        stmt.bindString(3, entity.get_UID());
    }

    @Override
    protected void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 2);
    }

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // _Name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // _IpAddress
            cursor.getString(offset + 2) // _UID
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.set_Name(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.set_IpAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.set_UID(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(User entity, long rowId) {
        return entity.get_UID();
    }

    /** @inheritdoc */
    @Override
    public String getKey(User entity) {
        if (entity != null) {
            return entity.get_UID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
