package com.tcl.database;

import com.tcl.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "MSGS".
 */
public class Msgs {

    private Long id;
    private int user_src_id;
    private int user_dst_id;
    /** Not-null value. */
    private java.util.Date data;
    private String content;
    private Integer type;
    private byte[] bytes;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MsgsDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Msgs() {
    }

    public Msgs(Long id) {
        this.id = id;
    }

    public Msgs(Long id, int user_src_id, int user_dst_id, java.util.Date data, String content, Integer type, byte[] bytes) {
        this.id = id;
        this.user_src_id = user_src_id;
        this.user_dst_id = user_dst_id;
        this.data = data;
        this.content = content;
        this.type = type;
        this.bytes = bytes;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMsgsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getUser_src_id() {
        return user_src_id;
    }

    public void setUser_src_id(int user_src_id) {
        this.user_src_id = user_src_id;
    }

    public int getUser_dst_id() {
        return user_dst_id;
    }

    public void setUser_dst_id(int user_dst_id) {
        this.user_dst_id = user_dst_id;
    }

    /** Not-null value. */
    public java.util.Date getData() {
        return data;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setData(java.util.Date data) {
        this.data = data;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public byte[] getBytes() {
        return bytes;
    }

    public void setBytes(byte[] bytes) {
        this.bytes = bytes;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    //dfafad
    // KEEP METHODS END

}
