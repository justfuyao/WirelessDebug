package com.tcl.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tcl.database.Msg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MSG".
*/
public class MsgDao extends AbstractDao<Msg, Void> {

    public static final String TABLENAME = "MSG";

    /**
     * Properties of entity Msg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property _UserUID = new Property(1, String.class, "_UserUID", false, "__USER_UID");
        public final static Property _Timestamps = new Property(2, long.class, "_Timestamps", false, "__TIMESTAMPS");
        public final static Property _Type = new Property(3, int.class, "_Type", false, "__TYPE");
        public final static Property _SendType = new Property(4, Integer.class, "_SendType", false, "__SEND_TYPE");
        public final static Property _CRC8 = new Property(5, Integer.class, "_CRC8", false, "__CRC8");
        public final static Property _Bytes = new Property(6, byte[].class, "_Bytes", true, "__BYTES");
        public final static Property _Length = new Property(7, Integer.class, "_Length", false, "__LENGTH");
        public final static Property _SendTime = new Property(8, Integer.class, "_SendTime", false, "__SEND_TIME");
    };

    private DaoSession daoSession;


    public MsgDao(DaoConfig config) {
        super(config);
    }
    
    public MsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MSG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"__USER_UID\" TEXT NOT NULL ," + // 1: _UserUID
                "\"__TIMESTAMPS\" INTEGER NOT NULL ," + // 2: _Timestamps
                "\"__TYPE\" INTEGER NOT NULL ," + // 3: _Type
                "\"__SEND_TYPE\" INTEGER," + // 4: _SendType
                "\"__CRC8\" INTEGER," + // 5: _CRC8
                "\"__BYTES\" BLOB PRIMARY KEY ," + // 6: _Bytes
                "\"__LENGTH\" INTEGER," + // 7: _Length
                "\"__SEND_TIME\" INTEGER);"); // 8: _SendTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MSG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Msg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.get_UserUID());
        stmt.bindLong(3, entity.get_Timestamps());
        stmt.bindLong(4, entity.get_Type());
 
        Integer _SendType = entity.get_SendType();
        if (_SendType != null) {
            stmt.bindLong(5, _SendType);
        }
 
        Integer _CRC8 = entity.get_CRC8();
        if (_CRC8 != null) {
            stmt.bindLong(6, _CRC8);
        }
 
        byte[] _Bytes = entity.get_Bytes();
        if (_Bytes != null) {
            stmt.bindBlob(7, _Bytes);
        }
 
        Integer _Length = entity.get_Length();
        if (_Length != null) {
            stmt.bindLong(8, _Length);
        }
 
        Integer _SendTime = entity.get_SendTime();
        if (_SendTime != null) {
            stmt.bindLong(9, _SendTime);
        }
    }

    @Override
    protected void attachEntity(Msg entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Msg readEntity(Cursor cursor, int offset) {
        Msg entity = new Msg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // _UserUID
            cursor.getLong(offset + 2), // _Timestamps
            cursor.getInt(offset + 3), // _Type
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // _SendType
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // _CRC8
            cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6), // _Bytes
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // _Length
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // _SendTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Msg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.set_UserUID(cursor.getString(offset + 1));
        entity.set_Timestamps(cursor.getLong(offset + 2));
        entity.set_Type(cursor.getInt(offset + 3));
        entity.set_SendType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.set_CRC8(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.set_Bytes(cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6));
        entity.set_Length(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.set_SendTime(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Msg entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Msg entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
